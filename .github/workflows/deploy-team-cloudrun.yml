name: Deploy Team API to Cloud Run

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: deploy-team-cloudrun
  cancel-in-progress: true

permissions:
  contents: read
  id-token: write

env:
  # --- GCP ---
  GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  GCP_REGION: ${{ vars.GCP_REGION }}
  GCP_AR_REPO: ${{ vars.GCP_AR_REPO }}
  CLOUD_RUN_SERVICE: ${{ vars.CLOUD_RUN_SERVICE }}

  # --- Non-secret app env (from GitHub Variables) ---
  SERVER_HOST: ${{ vars.SERVER_HOST || '0.0.0.0' }}
  SERVER_PORT: ${{ vars.SERVER_PORT || '8080' }}

  COMMONS_HOST: ${{ vars.COMMONS_HOST }}
  COMMONS_PORT: ${{ vars.COMMONS_PORT }}
  COMMONS_NAME: ${{ vars.COMMONS_NAME }}
  COMMONS_USER: ${{ vars.COMMONS_USER }}
  COMMONS_SSL_MODE: ${{ vars.COMMONS_SSL_MODE || 'require' }}
  PROJECTS_FILE_PATH: ${{ vars.PROJECTS_FILE_PATH }}

  # Optional Exiobase non-secret vars
  EXIOBASE_HOST: ${{ vars.EXIOBASE_HOST }}
  EXIOBASE_PORT: ${{ vars.EXIOBASE_PORT }}
  EXIOBASE_NAME: ${{ vars.EXIOBASE_NAME }}
  EXIOBASE_USER: ${{ vars.EXIOBASE_USER }}
  EXIOBASE_SSL_MODE: ${{ vars.EXIOBASE_SSL_MODE }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: üõéÔ∏è Checkout
        uses: actions/checkout@v4

      # ---- NEW: sanity check we have the right OIDC provider format --------
      - name: üîé Validate OIDC inputs (non-leaky)
        shell: bash
        env:
          WIP: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          SA:  ${{ secrets.GCP_SERVICE_ACCOUNT }}
        run: |
          set -euo pipefail
          fail() { echo "::error::$*"; exit 1; }

          if [[ -z "${WIP:-}" ]]; then
            fail "Secret GCP_WORKLOAD_IDENTITY_PROVIDER is empty/missing."
          fi
          if [[ -z "${SA:-}" ]]; then
            fail "Secret GCP_SERVICE_ACCOUNT is empty/missing."
          fi

          # Pattern check without printing secret contents
          re='^projects/[0-9]+/locations/global/workloadIdentityPools/[^/]+/providers/[^/]+$'
          if [[ "$WIP" =~ $re ]]; then
            echo "‚úÖ OIDC provider looks canonical (projects/.../providers/...)."
          else
            fail "GCP_WORKLOAD_IDENTITY_PROVIDER is NOT in canonical format 'projects/<num>/locations/global/workloadIdentityPools/<pool>/providers/<provider>'. Fix the secret and re-run."
          fi

          # Quick domain sanity check on SA (also non-leaky)
          if [[ "$SA" == *"@${GITHUB_REPOSITORY_OWNER,,}."* ]]; then
            echo "‚ÑπÔ∏è  SA domain pattern check passed (heuristic)."
          else
            echo "‚ÑπÔ∏è  SA domain not checked (heuristic only). Proceeding."
          fi

      - name: üîê Auth to GCP (OIDC)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          project_id: ${{ env.GCP_PROJECT_ID }}
          token_format: 'access_token'
          create_credentials_file: true

      - name: üß∞ Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: ">= 474.0.0"
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: üåé Set project env
        run: |
          echo "GOOGLE_CLOUD_PROJECT=${GCP_PROJECT_ID}" >> "$GITHUB_ENV"
          gcloud config set project "${GCP_PROJECT_ID}"

      - name: üöÄ Enable APIs (idempotent)
        run: |
          gcloud services enable run.googleapis.com cloudbuild.googleapis.com artifactregistry.googleapis.com secretmanager.googleapis.com

      - name: üóùÔ∏è Upsert secrets into Secret Manager (from GitHub Secrets)
        env:
          COMMONS_PASSWORD: ${{ secrets.COMMONS_PASSWORD }}
          EXIOBASE_PASSWORD: ${{ secrets.EXIOBASE_PASSWORD }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
        run: |
          set -euo pipefail
          upsert_secret () {
            local name="$1" value="$2"
            if [ -z "${value}" ]; then
              echo "  (skip) $name: empty (not set in GitHub Secrets)"
              return 0
            fi
            if ! gcloud secrets describe "$name" >/dev/null 2>&1; then
              gcloud secrets create "$name" --replication-policy="automatic"
              echo "  created secret: $name"
            else
              echo "  secret exists: $name"
            fi
            printf "%s" "$value" | gcloud secrets versions add "$name" --data-file=-
            echo "  added new version for: $name"
          }
          echo "==> Upserting secrets (idempotent)..."
          upsert_secret COMMONS_PASSWORD "${COMMONS_PASSWORD:-}"
          upsert_secret EXIOBASE_PASSWORD "${EXIOBASE_PASSWORD:-}"
          upsert_secret GEMINI_API_KEY "${GEMINI_API_KEY:-}"
          upsert_secret CLAUDE_API_KEY "${CLAUDE_API_KEY:-}"

      - name: üè∑Ô∏è Build & Push image (Cloud Build)
        env:
          IMAGE_URI: ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_AR_REPO }}/${{ env.CLOUD_RUN_SERVICE }}
          TAG: ${{ github.sha }}
        run: |
          gcloud builds submit --tag "${IMAGE_URI}:${TAG}" .

      - name: üå©Ô∏è Deploy to Cloud Run
        env:
          IMAGE_URI: ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_AR_REPO }}/${{ env.CLOUD_RUN_SERVICE }}
          TAG: ${{ github.sha }}
        run: |
          set -euo pipefail

          PROJECT_NUMBER="$(gcloud projects describe "${GCP_PROJECT_ID}" --format='value(projectNumber)')"
          RUNTIME_SA_EMAIL="${PROJECT_NUMBER}-compute@developer.gserviceaccount.com"

          # Build env list (omit empties)
          ENV_LIST="SERVER_HOST=${SERVER_HOST},SERVER_PORT=${SERVER_PORT}"
          [ -n "${COMMONS_HOST}" ] && ENV_LIST="${ENV_LIST},COMMONS_HOST=${COMMONS_HOST}"
          [ -n "${COMMONS_PORT}" ] && ENV_LIST="${ENV_LIST},COMMONS_PORT=${COMMONS_PORT}"
          [ -n "${COMMONS_NAME}" ] && ENV_LIST="${ENV_LIST},COMMONS_NAME=${COMMONS_NAME}"
          [ -n "${COMMONS_USER}" ] && ENV_LIST="${ENV_LIST},COMMONS_USER=${COMMONS_USER}"
          [ -n "${COMMONS_SSL_MODE}" ] && ENV_LIST="${ENV_LIST},COMMONS_SSL_MODE=${COMMONS_SSL_MODE}"
          [ -n "${PROJECTS_FILE_PATH}" ] && ENV_LIST="${ENV_LIST},PROJECTS_FILE_PATH=${PROJECTS_FILE_PATH}"

          # Optional Exiobase non-secrets
          [ -n "${EXIOBASE_HOST}" ] && ENV_LIST="${ENV_LIST},EXIOBASE_HOST=${EXIOBASE_HOST}"
          [ -n "${EXIOBASE_PORT}" ] && ENV_LIST="${ENV_LIST},EXIOBASE_PORT=${EXIOBASE_PORT}"
          [ -n "${EXIOBASE_NAME}" ] && ENV_LIST="${ENV_LIST},EXIOBASE_NAME=${EXIOBASE_NAME}"
          [ -n "${EXIOBASE_USER}" ] && ENV_LIST="${ENV_LIST},EXIOBASE_USER=${EXIOBASE_USER}"
          [ -n "${EXIOBASE_SSL_MODE}" ] && ENV_LIST="${ENV_LIST},EXIOBASE_SSL_MODE=${EXIOBASE_SSL_MODE}"

          # Secret mappings
          SECRET_LIST=""
          for s in COMMONS_PASSWORD EXIOBASE_PASSWORD GEMINI_API_KEY CLAUDE_API_KEY; do
            if gcloud secrets describe "$s" >/dev/null 2>&1; then
              if [ -z "$SECRET_LIST" ]; then
                SECRET_LIST="${s}=${s}:latest"
              else
                SECRET_LIST="${SECRET_LIST},${s}=${s}:latest"
              fi
            fi
          done

          gcloud run deploy "${CLOUD_RUN_SERVICE}" \
            --image "${IMAGE_URI}:${TAG}" \
            --region "${GCP_REGION}" \
            --platform managed \
            --allow-unauthenticated \
            --service-account "${RUNTIME_SA_EMAIL}" \
            --min-instances "0" \
            --max-instances "3" \
            --cpu "1" \
            --memory "512Mi" \
            --concurrency "80" \
            --timeout "60" \
            --set-env-vars "${ENV_LIST}" \
            $( [ -n "${SECRET_LIST}" ] && printf -- "--set-secrets %s" "${SECRET_LIST}" )

      - name: üîó Show URL
        run: |
          URL="$(gcloud run services describe "${CLOUD_RUN_SERVICE}" --region "${GCP_REGION}" --format='value(status.url)')"
          echo "Service URL: ${URL}"
